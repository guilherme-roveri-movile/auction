import org.apache.tools.ant.filters.ReplaceTokens

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.5.RELEASE'
        gradleVersion = '0.9.13'
    }
    repositories {
//        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${gradleVersion}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.google.cloud.tools.jib"

group = 'com.gbr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    compile(group: 'io.github.microutils', name: 'kotlin-logging', version: '1.6.10')
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
//    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("com.nhaarman:mockito-kotlin:1.5.0")
    testImplementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
}

test {
    useJUnitPlatform()
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task copyK8s(type: Copy) {
    from("${rootDir}/k8s/helm")
    include('**')
    filter(
            ReplaceTokens,
            tokens: [
                    'git.commit'         : getGitHash(),
                    'timestamp'          : "" + System.currentTimeMillis(),
                    'deployment.replicas': findProperty("replicas") ?: "2"
            ])
    into("${buildDir}/k8s/helm")
}

processResources {
    dependsOn(copyK8s)
}

jib {
    from {
        image = 'openjdk:alpine'
    }
    to {
        image = "gbroveri/auction:${getGitHash()}"
    }
    container {
        jvmFlags = ['-Xms512m', '-Dfile.encoding=UTF-8']
    }
}